# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Workspace name
project(pinfo)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

set(CONFIGURATION_NAME "Debug")

# Projects


# Top project
# Define some variables
set(PROJECT_PATH "${CMAKE_SOURCE_DIR}/")



#{{{{ User Code 1
# Place your code here

# --- PiDuino Begin. Do not edit by hand -----------------------------------------
# Modifies binary file paths if codelite is not used.
if (NOT CL_USED)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif (NOT CL_USED)
# search for the piduino package, if found, add the options ...
find_package(piduino QUIET)
if (piduino_FOUND)
  message (STATUS "PiDuino found !")
  link_directories(${PIDUINO_LIBRARY_DIRS})
  add_definitions(${PIDUINO_CFLAGS} -DPIDUINO_INSTALL_DATA_DIR="${PIDUINO_DATA_DIR}")
  include_directories(BEFORE ${PIDUINO_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR} ${PIDUINO_CMAKE_DIR}/../../../include/piduino)
  list(APPEND LINK_OPTIONS ${PIDUINO_LIBRARIES})
  include (GitVersion)
else (piduino_FOUND)
  message (STATUS "<WARNING> PiDuino not found !")
endif (piduino_FOUND)
# --- PiDuino End. Do not edit by hand -------------------------------------------

WriteGitVersionFile(${CMAKE_CURRENT_BINARY_DIR}/version.h)

#}}}}

include_directories(
    .
    .

)


# Compiler options
add_definitions(-g)
add_definitions(-O0)
add_definitions(-Wall)

# Linker options


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_SOURCE_DIR}/../main.cpp
)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -g -O0 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(pinfo ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(pinfo ${LINK_OPTIONS})



#{{{{ User Code 3
# Place your code here
install(TARGETS ${PROJECT_NAME} DESTINATION bin)
#}}}}

